" --------------------------------------
" Configuracion de plug vim
" --------------------------------------
call plug#begin()

" fileexplorer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" configuraciones utiles
Plug 'tpope/vim-sensible'

" flotar lineas a placer
Plug 'frace/vim-bubbles'

" snippets
Plug 'Shougo/neosnippet'

Plug 'Shougo/neosnippet-snippets'

" comentarios
Plug 'scrooloose/nerdcommenter'

" Validacion
Plug 'scrooloose/syntastic'

" Sintaxis
Plug 'digitaltoad/vim-jade'

Plug 'wavded/vim-stylus'

Plug 'kchmck/vim-coffee-script'

" buscame un archivo
Plug 'ctrlpvim/ctrlp.vim'

" Multiple edicion!!!
Plug 'terryma/vim-multiple-cursors'

" Squemas de color
Plug 'flazz/vim-colorschemes'

" jsbeutify
Plug 'maksimr/vim-jsbeautify'

" emmet
Plug 'mattn/emmet-vim'

" Git
Plug 'tpope/vim-fugitive'

" vim airline
Plug 'bling/vim-airline'

" C# Sintax
Plug 'OrangeT/vim-csharp'

" material theme
Plug 'jdkanani/vim-material-theme'

call plug#end()

" --------------------------------------
" Configuracion de edicion
" --------------------------------------
set number

" espacios en lugar de tabs
set expandtab

" indent 
set shiftwidth=2

" indent (python)
autocmd FileType python setlocal shiftwidth=4 softtabstop=4

" Ignore case when searching
set ignorecase
set smartcase

" Set mapleader
let mapleader = ","
let g:mapleader = ","

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" wrap line
set colorcolumn=80
set nowrap

" Files and Backups
set nobackup
set nowb
set noswapfile

" fold based on indent
set foldmethod=indent

" dont fold by default
set nofoldenable

" this is just what i use
set foldlevel=1

" tipografia
set guifont=monaco,14

" Tab nav
noremap <silent>tn :tabn<CR>
noremap <silent>tp :tabp<CR>

" Color
set background=dark
colors material-theme

"---------------------------------------------------------------------------
" Vim airline
"---------------------------------------------------------------------------
let g:airline#extensions#tabline#enabled = 1

"---------------------------------------------------------------------------
" NERDTree
"---------------------------------------------------------------------------
noremap <silent>,n :NERDTreeToggle<CR>
noremap <silent>,fn :NERDTreeFind<CR>
let NERDTreeIgnore=['\~$','\.pyc$']
let g:nerdtree_tabs_open_on_gui_startup=0
let g:nerdtree_tabs_autoclose=0

"---------------------------------------------------------------------------
" Bubble
"---------------------------------------------------------------------------
let g:bubbles_keyset = 'hjkl'

"-----------------------------------------------------------------------------------------------------
" syntastic
"-----------------------------------------------------------------------------------------------------
map <C-ENTER> :SyntasticCheck<CR>
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"let g:syntastic_javascript_checkers = ['eslint']


"-----------------------------------------------------------------------------------------------------
" ctrlp 
"-----------------------------------------------------------------------------------------------------
map fb :CtrlPMRU<cr>
map ff :CtrlP pwd<cr>

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)|node_modules|build$',
  \ 'file': '\v\.(exe|so|dll|pyc)$'
  \ }

"-----------------------------------------------------------------------------------------------------
" snippets 
"-----------------------------------------------------------------------------------------------------
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippets'

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

"-----------------------------------------------------------------------------------------------------
" vim-jsbeautify
"-----------------------------------------------------------------------------------------------------
let g:config_Beautifier = {
  \ 'js': { 'indent_style': 'space', 'indent_size': 2 }
  \ }
noremap <leader>jsformat :call JsBeautify()<cr>

"-----------------------------------------------------------------------------------------------------
" functions
"-----------------------------------------------------------------------------------------------------
source $PLUGIN_PATH/functions/quickrun.vim
source $PLUGIN_PATH/functions/entities.vim
source $PLUGIN_PATH/functions/unicode.vim
source $PLUGIN_PATH/functions/regexp.vim
